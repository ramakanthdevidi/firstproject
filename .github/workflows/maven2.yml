name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    env:
      REPO_URL: 'https://github.com/ramakanthdevidi/firstproject.git'
      BRANCH: 'main'
      IMAGE_NAME: 'firstproject-image'
      CONTAINER_NAME: 'firstproject-container'
      LOG_PATH: './logs'  # Path to store logs (you can change this as needed)

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3
      id: checkout

    # Step 2: Set up JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # Step 3: Build with Maven (Capture execution time)
    - name: Build with Maven
      run: |
        echo "Starting Maven Build..."
        start_time=$(date +%s)  # Capture start time
        mvn clean install
        end_time=$(date +%s)  # Capture end time
        execution_time=$((end_time - start_time))
        echo "Maven build completed in $execution_time seconds."
        echo "Execution time for Maven build: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_execution_times.txt
        echo "Maven Build Start Time: $start_time, End Time: $end_time, Duration: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_metadata.txt
        echo "Build Logs for Maven:" >> ${{ env.LOG_PATH }}/maven_build_logs.txt
        cat target/*.log >> ${{ env.LOG_PATH }}/maven_build_logs.txt

    # Step 4: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 5: Build Docker image (Capture execution time)
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        start_time=$(date +%s)  # Capture start time
        sudo chmod 666 /var/run/docker.sock
        docker build -t ${{ env.IMAGE_NAME }} .
        end_time=$(date +%s)  # Capture end time
        execution_time=$((end_time - start_time))
        echo "Docker build completed in $execution_time seconds."
        echo "Execution time for Docker build: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_execution_times.txt
        echo "Docker Build Start Time: $start_time, End Time: $end_time, Duration: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_metadata.txt
        echo "Build Logs for Docker:" >> ${{ env.LOG_PATH }}/docker_build_logs.txt
        cat ${{ github.workspace }}/docker_build_logs.log >> ${{ env.LOG_PATH }}/docker_build_logs.txt

    # Step 6: Run Docker container (Capture execution time)
    - name: Run Docker container
      run: |
        echo "Running Docker container..."
        start_time=$(date +%s)  # Capture start time
        docker rm -f ${{ env.CONTAINER_NAME }} || true
        docker run -d --name ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}
        end_time=$(date +%s)  # Capture end time
        execution_time=$((end_time - start_time))
        echo "Docker container started in $execution_time seconds."
        echo "Execution time for Docker run: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_execution_times.txt
        echo "Docker Run Start Time: $start_time, End Time: $end_time, Duration: $execution_time seconds" >> ${{ env.LOG_PATH }}/build_metadata.txt
        echo "Logs for Docker container run:" >> ${{ env.LOG_PATH }}/docker_run_logs.txt
        docker logs ${{ env.CONTAINER_NAME }} >> ${{ env.LOG_PATH }}/docker_run_logs.txt

    # Step 7: Upload build execution times, logs, and metadata as artifacts
    - name: Upload build artifacts (Execution Times, Logs, Metadata)
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          ${{ env.LOG_PATH }}/build_execution_times.txt
          ${{ env.LOG_PATH }}/maven_build_logs.txt
          ${{ env.LOG_PATH }}/docker_build_logs.txt
          ${{ env.LOG_PATH }}/docker_run_logs.txt
          ${{ env.LOG_PATH }}/build_metadata.txt

    # Step 8: Success message (with logs)
    - name: Success message
      if: success()
      run: |
        echo 'Pipeline completed successfully!'
        echo "Maven, Docker build, and Docker container run logs are available in the uploaded artifacts."
        echo "Execution times and build metadata are also uploaded."

    # Step 9: Failure message (with logs)
    - name: Failure message
      if: failure()
      run: |
        echo 'Pipeline failed.'
        echo "See logs for more details."
        echo "Logs can be found in the uploaded artifacts."
